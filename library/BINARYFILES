(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "28-Apr-2018 16:02:04" {DSK}<Users>kaplan>Local>medley3.5>lispcore>library>BINARYFILES.;1 53324        changes to%:  (FNS FILETOBYTEBLOCK)      previous date%: "22-Sep-99 09:38:17" {DSK}<Users>kaplan>Local>dict>code>BINARYFILES.;1)(* ; "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1997, 1999, 2018 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT BINARYFILESCOMS)(RPAQQ BINARYFILESCOMS       [                                                     (* ;                                                     "Generic for binary files with standard prefix")        (COMS (MACROS BYTES2 BYTES3 GETBYTE PUTBYTE PUTBYTES2 PUTBYTES3)              (MACROS BIN2 BIN3)              (MACROS BOUT2 BOUT3 BOUT4)              (MACROS TABLEBASE))        (RECORDS BYTEBLOCKHEADER STANDARDHEADER)        (FNS BINARYFILETYPE BYTEBLOCK COPYBINARYFILEHEADER FILETOBYTEBLOCK WORDBLOCK              SIZECOPYRIGHTANDDATESTRINGS NCOPYRIGHTSTRINGCHARS WRITECOPYRIGHTANDDATESTRINGS              PUTCOPYRIGHTSTRING)        (FNS COERCEUTOITIME ITOUTIME UTOITIME)        (COMS (FNS BINARYFILETYPETOCODE CODETOBINARYFILETYPE)              (VARS BINARYFILETYPES))        (FNS GETCOPYRIGHTSTRING)        (FNS EVENBYTE EVENNUMBER QUADBYTE QUADNUMBER OPENBINARYFILESTREAM OPENDATEDSTREAM              MAKE-STANDARDHEADER READBINARYFILEHEADER)        (MACROS BOUTBITS BOUTBITSCONTEXT)        (COMS (FNS BITBLOCK)              (MACROS SETBIT GETBIT))        (COMS                                                (* ; "For debugging")              (MACROS BB.DB BBC.DB))        (COMS                                                (* ; "For commented files")              (FNS COLLAPSECOMMENTS READCOMMENTEDFILE WRITECOMMENTEDFILE                    WRITECOMMENTEDFILE.ADDHISTORY WRITECOMMENT)              (FNS STRIPCOMMENTS)              (VARS (PHONRDTBL (COPYREADTABLE FILERDTBL)))              (P (SETSYNTAX (CHARCODE ;)                        '[MACRO (LAMBDA (FILE)                                       (LIST COMMENTFLG (COND [(EQ (PEEKCCODE FILE)                                                                   (CHARCODE ;))                                                               (READCCODE FILE)                                                               (COND ((EQ (PEEKCCODE FILE)                                                                          (CHARCODE ;))                                                                      (READCCODE FILE)                                                                      ';;;)                                                                     (T ';;]                                                              (T ';))                                             (DREADLINE FILE]                        PHONRDTBL])(* ; "Generic for binary files with standard prefix")(DECLARE%: EVAL@COMPILE (PUTPROPS BYTES2  MACRO   [OPENLAMBDA (BASE BYTEOFFSET EVENFLAG)                    (* ; "Gets a two-byte number.")     (COND        (EVENFLAG                (* ;; "If calling form has EVENFLAG, BYTEOFFSET is asserted to be even and Lisp or other implementations that have an even 2-byte fetch (\GETBASE) can optimize optimize")               (\GETBASE BASE (LRSH BYTEOFFSET 1)))        (T (LOGOR (LLSH (GETBYTE BASE BYTEOFFSET)                        8)                  (GETBYTE BASE (ADD1 BYTEOFFSET])(PUTPROPS BYTES3  MACRO   [OPENLAMBDA (BASE BYTEOFFSET)                             (* ; "Gets a three-byte number.")     (LOGOR (LLSH (GETBYTE BASE BYTEOFFSET)                  16)            (LLSH (GETBYTE BASE (ADD1 BYTEOFFSET))                  8)            (GETBYTE BASE (IPLUS BYTEOFFSET 2])(PUTPROPS GETBYTE  MACRO   ((BASE OFFSET)                                            (* ;                                                          "Gets the byte stored at offset from base")    (\GETBASEBYTE BASE OFFSET)))(PUTPROPS PUTBYTE  MACRO   (OPENLAMBDA (BASE BYTEOFFSET VALUE)                       (* ;                        "Adjust base/offset cause \PUTBASEBYTE fails for offsets greater than 65535")     (\PUTBASEBYTE (\ADDBASE BASE (LRSH BYTEOFFSET 1))            (LOGAND BYTEOFFSET 1)            VALUE)))(PUTPROPS PUTBYTES2  MACRO   [OPENLAMBDA (BASE BYTEOFFSET VALUE)     (LET ((B (\ADDBASE BASE (LRSH BYTEOFFSET 1)))           (OFF (LOGAND BYTEOFFSET 1)))                      (* ;                        "Adjust base/offset cause \PUTBASEBYTE fails for offsets greater than 65535")          (\PUTBASEBYTE B OFF (LRSH VALUE 8))          (\PUTBASEBYTE B (ADD1 OFF)                 (LOGAND VALUE 255])(PUTPROPS PUTBYTES3  MACRO   [OPENLAMBDA (BASE BYTEOFFSET VALUE)     (LET ((B (\ADDBASE BASE (LRSH BYTEOFFSET 1)))           (OFF (LOGAND BYTEOFFSET 1)))                      (* ;                        "Adjust base/offset cause \PUTBASEBYTE fails for offsets greater than 65535")          (\PUTBASEBYTE B OFF (LRSH VALUE 16))          (\PUTBASEBYTE B (ADD1 OFF)                 (LOGAND (LRSH VALUE 8)                        255))          (\PUTBASEBYTE B (IPLUS OFF 2)                 (LOGAND VALUE 255]))(DECLARE%: EVAL@COMPILE (PUTPROPS BIN2  MACRO   (OPENLAMBDA (F)     (LOGOR (LLSH (\BIN F)                  8)            (\BIN F))))(PUTPROPS BIN3  MACRO   (OPENLAMBDA (F)     (LOGOR (LLSH (\BIN F)                  16)            (LLSH (\BIN F)                  8)            (\BIN F)))))(DECLARE%: EVAL@COMPILE (PUTPROPS BOUT2  MACRO   (OPENLAMBDA (F V)     (BOUT F (LRSH V 8))     (BOUT F (LOGAND V 255))))(PUTPROPS BOUT3  MACRO   (OPENLAMBDA (F V)     (BOUT F (LRSH V 16))     (BOUT2 F (LOGAND V 65535))))(PUTPROPS BOUT4  MACRO   (OPENLAMBDA (F V)                                         (* ; "Store 32-bit signed integer V.")     (BOUT2 F (LRSH V 16))     (BOUT2 F (LOGAND V 65535)))))(DECLARE%: EVAL@COMPILE (PUTPROPS TABLEBASE  MACRO   ((BASE BYTELOC)                                           (* ;                 "Maps a byte location into a pointer to a table beginning at that offset from base")    (\ADDBASE BASE (LRSH BYTELOC 1)))))(DECLARE%: EVAL@COMPILE(ACCESSFNS BYTEBLOCKHEADER [(blockLength (LOGOR (LLSH (\GETBASEBYTE DATUM 0)                                                          16)                                                    (LLSH (\GETBASEBYTE DATUM 1)                                                          8)                                                    (\GETBASEBYTE DATUM 2))                                       (PROGN (\PUTBASEBYTE DATUM 0 (LRSH NEWVALUE 16))                                              (\PUTBASEBYTE DATUM 1 (LOGAND (LRSH NEWVALUE 8)                                                                           255))                                              (\PUTBASEBYTE DATUM 2 (LOGAND NEWVALUE 255]                               (SYSTEM))(BLOCKRECORD STANDARDHEADER ((NIL 3 BYTE                 (* ; "Bytes 0-2: file length"))                                 (STOREDHEADERLENGTH BYTE                                  (* ;; "Byte 3: Header length explicitly stored in header block, as opposed to depending on constant value in code.  Includes all fixed-length information for this type"))                                 (BINARYFILETYPE BYTE        (* ;                                              "Byte 4: Type of this binary file, from CONSTANTPROPS")                                        )                                 (VERSION BYTE               (* ;                                                    "Byte 5: Version number for this implementation")                                        )                                 (COPYRIGHTLOC BYTE          (* ;                                                "Byte 6: Location of copyright string, zero if none")                                        )                                 (LANGUAGECODE BYTE          (* ;                                                            "Byte 7:  Code from CONSTANTPROPS"))                                 (UINTEGERDATE1 WORD                                         (* ;; "Bytes 8-11: unique birthdate identifier, stored in commonlisp universal time as 32bit unsigned number"))                                 (UINTEGERDATE2 WORD))                                (CREATE (BYTEBLOCK (FETCH (STANDARDHEADER                                                                          STANDARDHEADERLENGTH)                                                          OF NIL)))                                [ACCESSFNS STANDARDHEADER ((STANDARDHEADERLENGTH (PROGN 12))                                                           [UINTEGERDATE                                                            (CL:LOGIOR (CL:ASH (FETCH                                                                                (STANDARDHEADER                                                                                 UINTEGERDATE1)                                                                                  OF DATUM)                                                                              16)                                                                   (FETCH UINTEGERDATE2                                                                      OF DATUM))                                                            (PROGN (REPLACE (STANDARDHEADER                                                                                 UINTEGERDATE1)                                                                      OF DATUM                                                                      WITH (CL:ASH NEWVALUE -16))                                                                   (REPLACE (STANDARDHEADER                                                                                 UINTEGERDATE2)                                                                      OF DATUM                                                                      WITH (LOGAND NEWVALUE 65535                                                                                      ]                                                           (STRINGDATE (GDATE (FETCH (                                                                                       STANDARDHEADER                                                                                          INTEGERDATE                                                                                          )                                                                                 OF DATUM)                                                                              (DATEFORMAT TIME.ZONE))                                                                  (REPLACE (STANDARDHEADER                                                                                       INTEGERDATE)                                                                     OF DATUM WITH                                                                                  (IDATE NEWVALUE)))                                                           (FILELENGTH (FETCH (BYTEBLOCKHEADER                                                                                   blockLength)                                                                          OF DATUM)                                                                  (REPLACE (BYTEBLOCKHEADER                                                                                blockLength)                                                                     OF DATUM WITH NEWVALUE))                                                           (BINARYFILETYPESYMBOL                                                            (CODETOBINARYFILETYPE (FETCH                                                                                   (STANDARDHEADER                                                                                    BINARYFILETYPE)                                                                                     OF DATUM)                                                                   T))                                                           (INTEGERDATE (COERCEUTOITIME (FETCH                                                                                         UINTEGERDATE                                                                                           OF                                                                                           DATUM))                                                                  (REPLACE UINTEGERDATE                                                                     OF DATUM WITH                                                                                  (ITOUTIME NEWVALUE]                                (SYSTEM)))(DEFINEQ(BINARYFILETYPE  [LAMBDA (FILE LEAVEOPEN UNKNOWNOK)                     (* ; "Edited 18-Jul-97 12:42 by rmk:")    (* ;; "Returns the binaryfiletype symbol for FILE, causing an error if it is not of a recognized type.  File is left open if LEAVEOPEN, position is set to 0. ")    (RESETLST        (LET [(STRM (OPENSTREAM FILE 'INPUT]             [RESETSAVE NIL (IF LEAVEOPEN                                THEN `(SETFILEPTR ,STRM 0)                              ELSE `(CLOSEF? ,STRM]             (CL:WHEN (IGEQ (GETEOFPTR STRM)                            12)                 (SETFILEPTR STRM 4)                         (* ; "Move to the type byte")                 (CODETOBINARYFILETYPE (BIN STRM)                        UNKNOWNOK))))])(BYTEBLOCK  [LAMBDA (NBYTES)                                       (* rmk%: "22-Dec-85 15:15")                                                             (* Returns a block of NBYTES bytes)                                                             (* Coerce from bytes to cells;                                                           should really have FOLDHI)    (\ALLOCBLOCK (LRSH (IPLUS 3 NBYTES)                       2])(COPYBINARYFILEHEADER  [LAMBDA (HEADER)                                       (* ; "Edited  3-Mar-92 11:21 by rmk:")    (LET [(BLOCK (BYTEBLOCK (FETCH STOREDHEADERLENGTH OF HEADER]         (\MOVEBYTES HEADER 0 BLOCK 0 (FETCH STOREDHEADERLENGTH OF HEADER))         BLOCK])(FILETOBYTEBLOCK  [LAMBDA (FILE LENGTH START)                           (* ; "Edited 28-Apr-2018 11:15 by rmk:")                                                             (* rmk%: "20-Dec-87 10:08")    (* ;; "Returns a (system-internal) arrayblock holding the contents of FILE.")    (* ;; "")    (* ;; "If LENGTH is not given, it is read from first 3 bytes of the file, to avoid depending on file server capabilities.  If FILE is already open, then just reads from current position.  This means that byteblock files (with 3 byte length-leaders) can simply be appended together.")    (* ;; "")    (* ;; "If LENGTH is T, then the filelength of the file is used.  Otherwise, LENGTH is the number of bytes to read.")    (* ;; "")    (* ;; "If START is not given, then reading begins after the 3-byte LENGTH")    (RESETLST        (LET (BLOCK STREAM)             [IF (AND (STREAMP FILE)                          (SETQ STREAM (GETSTREAM FILE 'INPUT T)))                 THEN (SETQ START (GETFILEPTR STREAM))               ELSE (RESETSAVE [SETQ STREAM (OPENSTREAM FILE 'INPUT 'OLD '((SEQUENTIAL T)                                                                               (TYPE BINARY]                               '(PROGN (CLOSEF? OLDVALUE]             [IF (NULL LENGTH)                 THEN (SETQ START 3)                       (SETQ LENGTH (BIN3 STREAM))               ELSE (SETQ START 0)                     (IF (EQ LENGTH T)                         THEN (SETQ LENGTH (GETEOFPTR STREAM]             (SETQ BLOCK (BYTEBLOCK LENGTH))             (REPLACE FILELENGTH OF BLOCK WITH LENGTH)             (\BINS STREAM BLOCK START (IDIFFERENCE LENGTH 3))             BLOCK))])(WORDBLOCK  [LAMBDA (NWORDS)                                       (* rmk%: " 9-Feb-87 18:42")                                                             (* Returns a block of NWORDS words)                                                             (* Coerce from words to cells;                                                           should really have FOLDHI)    (\ALLOCBLOCK (LRSH (ADD1 NWORDS)                       1])(SIZECOPYRIGHTANDDATESTRINGS  [LAMBDA (COPYRIGHTSTRING HEADER VERSIONSTRING)         (* ; "Edited  9-Jul-94 11:20 by rmk:")    (* ;; "Add 1 for string length, 2->0 for CRLF before copyright string, 2 for CRLF separator before date, 2 for CRLF, 4->0 2 CRLF's before version string, and 2 for final CRLF's.  Also, add 2 for every CR, LF, or CRLF in the middle of the copyright string.  We don't actually know the date yet, but assume that all dates are the same size.  If HEADER, then assumes it is a standard header block, that copyright is to be written by WRITECOPYRIGHTANDDATESTRINGS immediately after the header on the file.  Block is marked accordingly and return is the byte location just after the copyright and date.  If no HEADER, then return is simply length of copyright and date.")    (LET [CLOC (LEN (IPLUS [IF (EQ COPYRIGHTSTRING 'NODATE)                               THEN 0                             ELSE (IPLUS (IF COPYRIGHTSTRING                                                 THEN (IPLUS 1 (NCOPYRIGHTSTRINGCHARS                                                                           COPYRIGHTSTRING))                                               ELSE 0)                                             2                                             (NCHARS (DATE (DATEFORMAT TIME.ZONE]                           (IF VERSIONSTRING                               THEN (IPLUS 4 (NCOPYRIGHTSTRINGCHARS VERSIONSTRING))                             ELSE 0]         (CL:UNLESS (EQ LEN 0)                               (* ; "Add for closing CRLF")             (ADD LEN 2))         (IF HEADER             THEN (SETQ CLOC (EVENNUMBER (FETCH STOREDHEADERLENGTH OF HEADER)))                   (IF COPYRIGHTSTRING                       THEN (REPLACE COPYRIGHTLOC OF HEADER WITH CLOC))                    (* ;;             "Another EVENNUMBER because WRITECOPYRIGHTANDDATESTRINGS leaves file at even position ")                   (EVENNUMBER (IPLUS CLOC LEN))           ELSE LEN])(NCOPYRIGHTSTRINGCHARS  [LAMBDA (COPYRIGHTSTRING)                              (* ; "Edited 23-Apr-94 16:57 by rmk:")    (* ;;  "Computes number of bytes to be occupied by copyrightstring, counting 2 for each CR, LF, or CRLF.")    (FOR I (NC _ 0) FROM 1 DO (SELCHARQ (NTHCHARCODE COPYRIGHTSTRING I)                                               (NIL (RETURN NC))                                               (CR (CL:WHEN (EQ (CHARCODE LF)                                                                (NTHCHARCODE COPYRIGHTSTRING                                                                       (ADD1 I)))                                                       (* ;;                                "Bump I to skip an actually occuring LF, since we're doing it here.")                                                       (ADD I 1))                                                   (ADD NC 2))                                               (LF (ADD NC 2))                                               (ADD NC 1])(WRITECOPYRIGHTANDDATESTRINGS  [LAMBDA (COPYRIGHTSTRING STREAM DATE VERSIONSTRING)    (* ; "Edited  9-Jul-94 11:04 by rmk:")    (EVENBYTE STREAM)    (CL:UNLESS (EQ COPYRIGHTSTRING 'NODATE)        (IF COPYRIGHTSTRING            THEN                   (* ;; "Copyright string assumed to be 8-bit ascii")                  (BOUT STREAM (IPLUS 2 (NCOPYRIGHTSTRINGCHARS COPYRIGHTSTRING)))                   (* ;; "Output copyright string, including length byte to facilitate future access and CRLF to make for better viewing.  Convert all internal CR, LF, or CRLF to CRLF.  This should provide reasonable formatting on all platforms.")                  (AND NIL (BOUT STREAM (CHARCODE CR))                       (BOUT STREAM (CHARCODE LF)))                  (PUTCOPYRIGHTSTRING COPYRIGHTSTRING STREAM)                   (* ;;                 "Put both CR and LF, since we don't know what kind of system it will be viewed on")                  (BOUT STREAM (CHARCODE CR))                  (BOUT STREAM (CHARCODE LF)))        (PRIN3 (IF (STRINGP DATE)                 ELSEIF (FIXP DATE)                   THEN (GDATE DATE (DATEFORMAT TIME.ZONE))                 ELSEIF (NULL DATE)                   THEN (DATE (DATEFORMAT TIME.ZONE))                 ELSE                        (* ;; "DATE is assumed to be a standard header")                       (FETCH STRINGDATE OF DATE))               STREAM))    (IF VERSIONSTRING        THEN (BOUT STREAM (CHARCODE CR))                 (* ; "2 CRLF separators")              (BOUT STREAM (CHARCODE LF))              (BOUT STREAM (CHARCODE CR))              (BOUT STREAM (CHARCODE LF))              (PUTCOPYRIGHTSTRING VERSIONSTRING STREAM))    (CL:WHEN (OR (NEQ COPYRIGHTSTRING 'NODATE)                 VERSIONSTRING)                              (* ;                                                        "Closing CRLF only if something was put out")        (BOUT STREAM (CHARCODE CR))        (BOUT STREAM (CHARCODE LF)))    (EVENBYTE STREAM])(PUTCOPYRIGHTSTRING  [LAMBDA (STRING STREAM)                                (* ; "Edited  9-Jul-94 10:57 by rmk:")    (* ;; "Puts STRING on STREAM, make sure that each CR or LF sequence is expanded to a CRLF.")    (FOR I C FROM 1 DO (BOUT STREAM (SELCHARQ (SETQ C (NTHCHARCODE STRING I))                                                     (NIL (RETURN))                                                     (CR (CL:WHEN (EQ (CHARCODE LF)                                                                      (NTHCHARCODE STRING                                                                             (ADD1 I)))                                                             (* ;;                                "Bump I to skip an actually occuring LF, since we're doing it here.")                                                             (ADD I 1))                                                         (BOUT STREAM (CHARCODE CR))                                                         (CHARCODE LF))                                                     (LF (BOUT STREAM (CHARCODE CR))                                                         (CHARCODE LF))                                                     C]))(DEFINEQ(COERCEUTOITIME  [LAMBDA (UTIME?)                                       (* ; "Edited 10-Oct-93 15:53 by rmk:")    (* ;; "Returns Interlisp IDATE time corresponding to UTIME?.  UTIME? might actually be in IDATE format already (backward compatibility issues), in which case nothing needs to be done.")    (CL:MULTIPLE-VALUE-BIND (SECOND MINUTE HOUR DATE MONTH YEAR)           (CL:DECODE-UNIVERSAL-TIME UTIME?)           (CL:IF (ILESSP YEAR 1970)               UTIME?               (UTOITIME UTIME?))])(ITOUTIME  [LAMBDA (ITIME)                                        (* ; "Edited 10-Oct-93 16:05 by rmk:")    (* ;; "Converts Interlisp IDATE time to commonlisp universal time")    (+ ITIME (CONSTANT (+ (CL:* 365 24 60 60)                          MAX.FIXP 1])(UTOITIME  [LAMBDA (UTIME)                                        (* ; "Edited 10-Oct-93 16:04 by rmk:")    (* ;; "Converts commonlisp universal time to Interlisp IDATE")    (- UTIME (CONSTANT (+ (CL:* 365 24 60 60)                          MAX.FIXP 1]))(DEFINEQ(BINARYFILETYPETOCODE  [LAMBDA (FILETYPE)                                     (* ; "Edited 17-Jun-95 09:41 by rmk:")    (SETQ FILETYPE (U-CASE FILETYPE))    (OR [CADR (FIND L IN BINARYFILETYPES SUCHTHAT (EQMEMB FILETYPE (CAR L]        (HELP "UNKNOWN FILETYPE" FILETYPE])(CODETOBINARYFILETYPE  [LAMBDA (CODE UNKNOWNOK)                                   (* ; "Edited  2-May-99 13:35 by rmk:")                                                             (* ; "Edited 17-Jun-95 09:41 by rmk:")    (* ;; "Return CADDR, which means that a code can map to a different symbol-type than the symol-type will map to.  E.g. 8 can map to FSMFILE, but OLDFSMFILE maps to 8 while FSMFILE maps to 19.  This allows upgrading of a generic type.")    (FOR L IN BINARYFILETYPES WHEN (EQ CODE (CADR L))       DO [RETURN (CL:IF (CADDR L)                          (CAR (MKLIST (CADDR L)))                          (CAR (MKLIST (CAR L))))] FINALLY (IF UNKNOWNOK                                                                   THEN 'UNKNOWN                                                                 ELSE (HELP                                                                         "UNKNOWN BINARYFILETYPE CODE"                                                                                CODE]))(RPAQQ BINARYFILETYPES       ((FSMINDEX 1)                                                             (* ; "counting and noncounting")        (SYNONYMTABLE 2)        (CACHEBLOCK 3)                                                             (* ; "For number mapping")        (ACCESSTABLE 4)                                                             (* ; "Linear approximation")        (DEFSFILE 5)        (VARIABLEWIDTHDATA 6)                                                             (* ; "Nerd data")        (TRANSLATIONTABLES 7)        (OLDFSMFILE 8 FSMFILE)                                                             (* ;                                 "Superceded by type 19, but generic code gets FSMFILE as a return.")                (* ;; "Avoid 9, 10, 13 which are likely to appear in text files.")        (SORTFILE 11)        (CATEGORYFILE 12)        (HMMFILE 14)        (HMMTRAINERMODEL 15)        (BITLOCATORFILE 16)        (LOCTABLE 17)        (VLDEFSFILE 18)        (FSMFILE 19)                                                             (* ; "Supercedes type 8, 5/1/1999.")        (SIMPLECOMPACTFSM 101                (* ;;            "Lauri's compaction schems.  Can't really be used to discriminate text from binary file"))))(DEFINEQ(GETCOPYRIGHTSTRING  [LAMBDA (BASE OFFSET NOVALUE)                          (* ; "Edited 13-Oct-90 13:02 by rmk:")    (* ;; "Returns copyright string stored at byte OFFSET from base, where byte at that location is the length.  OFFSET=NOVALUE or 0 => no such string.  Thus, NOVALUE=T if caller has already checked.  If OFFSET is NIL, then the COPYRIGHTLOC of assumed STANDARDHEADER base is used")    (IF [NEQ (OR NOVALUE 0)                 (OR OFFSET (SETQ OFFSET (FETCH (STANDARDHEADER COPYRIGHTLOC) OF BASE]        THEN (LET ((LEN (GETBYTE BASE OFFSET))                       (START 1))                            (* ; "Skip leading CR, LF, SPACE, TAB")                      (FOR I FROM 1 TO LEN WHILE (SELCHARQ (GETBYTE BASE                                                                                  (IPLUS I OFFSET))                                                                      ((CR LF SPACE TAB)                                                                            (ADD START 1))                                                                      NIL))                      (FOR I (STRPOS _ 0)                             [STR _ (ALLOCSTRING (- LEN (- START 1] FROM START TO LEN                         DO (RPLCHARCODE STR (ADD STRPOS 1)                                       (GETBYTE BASE (IPLUS I OFFSET))) FINALLY (RETURN STR]))(DEFINEQ(EVENBYTE  [LAMBDA (STREAM)                                       (* ; "Edited 17-Dec-89 14:51 by rmk:")                                                             (* ;                           "Outputs a zero padding byte if stream is not positioned at an even byte")    (OR (EVENP (GETFILEPTR STREAM))        (BOUT STREAM 0])(EVENNUMBER  [LAMBDA (N)                                            (* ; "Edited 17-Dec-89 14:52 by rmk:")                                                             (* ; "Bumps n by one if it isn't even")    (IF (EVENP N)        THEN N      ELSE (ADD1 N])(QUADBYTE  [LAMBDA (STREAM)                                       (* ; "Edited 22-Sep-99 09:33 by rmk:")    (* ;; "Outputs zero padding bytes to insure that stream is positioned at a 4-byte boundary")    (SELECTQ (LOGAND (GETFILEPTR STREAM)                    3)        (3 (BOUT STREAM 0))        (2 (BOUT STREAM 0)           (BOUT STREAM 0))        (1 (BOUT STREAM 0)           (BOUT STREAM 0)           (BOUT STREAM 0))        NIL])(QUADNUMBER  [LAMBDA (N)                                            (* ; "Edited 22-Sep-99 09:36 by rmk:")    (* ;; "Bumps N to bring it up to the next multiple of 4")    (IPLUS N (SELECTQ (LOGAND N 3)                 (3 1)                 (2 2)                 (1 3)                 0])(OPENBINARYFILESTREAM  [LAMBDA (FILENAME HEADER COPYRIGHTSTRING VERSIONSTRING)(* ; "Edited  9-Jul-94 10:44 by rmk:")    (* ;; "Opens a binary stream, stores its date in the standard header HEADER, and then writes HEADER at the beginning of the stream, followed by COPYRIGHT, if given, and clear-text date (unless COPYRIGHTSTRING is NODATE), and VERSIONSTRING (if given) separated by 2 CRLF sequences.  Checks for file-length consistency upon normal closing.  This check is tricky because not all servers accurately maintain the length--we assume that if the file is open it is positioned at the end--and we make that be the EOF.  If it has already been closed, we don't check.")    (LET (STREAM)                                            (* ;                "Don't do sequential, cause NS servers flush the file if you end up over allocation")         [RESETSAVE [SETQ STREAM (OPENDATEDSTREAM FILENAME 'OUTPUT 'NEW                                        `((TYPE BINARY)                                          (LENGTH ,(FETCH FILELENGTH OF HEADER]                `(PROGN (COND                           (RESETSTATE (CLOSEF? OLDVALUE)                                  (DELFILE OLDVALUE))                           ((GETSTREAM OLDVALUE 'OUTPUT T)                            (LET ((LEN (GETFILEPTR OLDVALUE)))                                 (CLOSEF OLDVALUE)                                 (COND                                    ((IEQP LEN ,(FETCH FILELENGTH OF HEADER))                                     (SETFILEINFO (FULLNAME OLDVALUE)                                            'LENGTH LEN))                                    (T (HELP "BINARYFILE LENGTH MISMATCH"                                             (LIST (FULLNAME OLDVALUE)                                                   ,(FETCH FILELENGTH OF HEADER)                                                   LEN]         (REPLACE INTEGERDATE OF HEADER WITH (GETFILEINFO STREAM 'ICREATIONDATE))         (PRINTOUT T "Output file = " (FULLNAME STREAM)                (CONCAT "  [" (FETCH STRINGDATE OF HEADER)                       "]")                T 3 "Length = " (FETCH FILELENGTH OF HEADER)                " bytes" T)         (\BOUTS STREAM HEADER 0 (FETCH STOREDHEADERLENGTH OF HEADER))         (WRITECOPYRIGHTANDDATESTRINGS COPYRIGHTSTRING STREAM HEADER VERSIONSTRING)         STREAM])(OPENDATEDSTREAM  [LAMBDA (FILE ACCESS RECOG PARAMETERS)                 (* ; "Edited 15-Apr-89 21:12 by rmk:")                                                             (* ;                           "Version of OPENSTREAM that tries to guarantee a meaningful creationdate")    (LET ((STREAM (OPENSTREAM FILE ACCESS RECOG PARAMETERS)))         (if (NULL (GETFILEINFO STREAM 'ICREATIONDATE))             then (SETQ STREAM (OPENSTREAM (CLOSEF STREAM)                                          ACCESS                                          'OLD PARAMETERS))                   (OR (GETFILEINFO STREAM 'ICREATIONDATE)                       (HELP "COULDN'T OPEN DATED STREAM" STREAM)))         STREAM])(MAKE-STANDARDHEADER  [LAMBDA (HEADERLENGTH TYPE VERSION FILELENGTH IDATE BLOCK LANGUAGE)                                                             (* ; "Edited 18-Nov-93 18:21 by rmk:")    (CL:UNLESS BLOCK        (SETQ BLOCK (BYTEBLOCK (MAX 12 HEADERLENGTH))))    (CL:WHEN FILELENGTH (REPLACE FILELENGTH OF BLOCK WITH FILELENGTH))    (REPLACE STOREDHEADERLENGTH OF BLOCK WITH HEADERLENGTH)    (CL:WHEN TYPE        (REPLACE BINARYFILETYPE OF BLOCK WITH (BINARYFILETYPETOCODE TYPE)))    (CL:WHEN VERSION        (REPLACE (STANDARDHEADER VERSION) OF BLOCK WITH VERSION))    (CL:WHEN LANGUAGE        [REPLACE LANGUAGECODE OF BLOCK WITH (CAR (MKLIST (LANGUAGECODE LANGUAGE])    (REPLACE INTEGERDATE OF BLOCK WITH (OR IDATE (IDATE)))    BLOCK])(READBINARYFILEHEADER  [LAMBDA (FILE TYPE VERSIONS LEAVEOPEN WHOLEFILE MINHEADERLENGTH)                                                             (* ; "Edited  6-Dec-97 12:28 by rmk:")    (* ;; "Returns a (system-internal) arrayblock holding the header at the beginning of FILE, provided that it is of type TYPE and has one of the allowable VERSIONS.  Length is read from first 3 bytes of the file, to avoid depending on file server capabilities.  The header length is the next byte after this.  If FILE is already open, then just reads from current position.  If file is opened, it is left open if LEAVEOPEN.  Returns 2 values--header block plus stream or closed filename.  If WHOLEFILE, returns a single block containing the whole file.  IF MINHEADERLENGTH is given, then block returned will be maximum of its stored length and MINHEADERLENGTH.  This allows for future upgrades.")    (LET (FILELENGTH BLOCK HEADERLENGTH STREAM)         [IF [AND (STREAMP FILE)                      (SETQ STREAM (GETSTREAM FILE 'INPUT]             THEN (SETQ LEAVEOPEN T)           ELSE [SETQ STREAM (OPENSTREAM FILE 'INPUT 'OLD `((TYPE BINARY)                                                                (SEQUENTIAL ,WHOLEFILE]                 (CL:UNLESS LEAVEOPEN                     [RESETSAVE NIL `(CLOSEF? ,STREAM])]         (SETQ FILELENGTH (BIN3 STREAM))         (SETQ HEADERLENGTH (BIN STREAM))         (CL:WHEN MINHEADERLENGTH             (SETQ HEADERLENGTH (MAX HEADERLENGTH MINHEADERLENGTH)))         [SETQ BLOCK (MAKE-STANDARDHEADER HEADERLENGTH NIL NIL FILELENGTH NIL (CL:WHEN                                                                                   WHOLEFILE                                                                                   (BYTEBLOCK                                                                                    FILELENGTH]         (\BINS STREAM BLOCK 4 (- (CL:IF WHOLEFILE                                      FILELENGTH                                      HEADERLENGTH)                                  4))         (CL:UNLESS (OR (NULL TYPE)                        (EQ (FETCH BINARYFILETYPE OF BLOCK)                            (BINARYFILETYPETOCODE TYPE)))             (ERROR "Incorrect binary file type" (LIST TYPE (CODETOBINARYFILETYPE (FETCH                                                                                       BINARYFILETYPE                                                                                         OF                                                                                         BLOCK)                                                                   T))))         (CL:UNLESS (OR (NULL VERSIONS)                        (EQMEMB (FETCH VERSION OF BLOCK)                               VERSIONS))             (ERROR (CONCAT "Unacceptable " TYPE " version")                    (FETCH VERSION OF BLOCK)))         (CL:VALUES BLOCK (IF LEAVEOPEN                              THEN STREAM                            ELSE (CLOSEF STREAM]))(DECLARE%: EVAL@COMPILE (PUTPROPS BOUTBITS  MACRO   (OPENLAMBDA (STREAM BITS NBITS)     (BIND (BITSREMAINING _ BITS)            (NBITSREMAINING _ NBITS) DO (COND                                               ((IGREATERP NEMPTYBITSINBYTE NBITSREMAINING)                                                             (* ; "BITSREMAINING is less than 256")                                                (SETQ NEMPTYBITSINBYTE (IDIFFERENCE NEMPTYBITSINBYTE                                                                              NBITSREMAINING))                                                (SETQ BITSINBYTE (CL:LOGIOR BITSINBYTE                                                                        (CL:ASH BITSREMAINING                                                                                NEMPTYBITSINBYTE)))                                                (RETURN)))   (* ; "BITSREMAINING may be a bignum")                                           [BOUT STREAM (CL:LOGIOR BITSINBYTE                                                               (CL:ASH BITSREMAINING                                                                      (IMINUS (SETQ NBITSREMAINING                                                                               (IDIFFERENCE                                                                                       NBITSREMAINING                                                                                                                                                                           NEMPTYBITSINBYTE                                                                                      ]                                           (SETQ BITSREMAINING (LOGAND BITSREMAINING                                                                      (- (CL:ASH 1 NBITSREMAINING)                                                                         1)))                                           (SETQ BITSINBYTE 0)                                           (SETQ NEMPTYBITSINBYTE 8))     BITS))(PUTPROPS BOUTBITSCONTEXT  MACRO   ((STREAM . FORMS)                                         (* ;                                                   "Open STREAM needed so can cleanup the last byte")    (LET ((NEMPTYBITSINBYTE 8)          (BITSINBYTE 0))         (DECLARE (SPECVARS NEMPTYBITSINBYTE BITSINBYTE))         (PROGN . FORMS)         (OR (EQ NEMPTYBITSINBYTE 8)             (BOUT STREAM BITSINBYTE))         STREAM))))(DEFINEQ(BITBLOCK  [LAMBDA (NBITS)                                        (* rmk%: "22-Dec-85 15:19")                                                             (* Returns a block of NBITS bytes)                                                             (* Coerce from bits to cells;                                                           should really have FOLDHI)    (\ALLOCBLOCK (LRSH (IPLUS 31 NBITS)                       5]))(DECLARE%: EVAL@COMPILE (PUTPROPS SETBIT  MACRO   [OPENLAMBDA (BASE BITNUM VALUE)     (\PUTBASEBYTE BASE (LRSH BITNUM 3)            (IF (EQ VALUE 1)                THEN (LOGOR (LLSH 1 (IDIFFERENCE 7 (LOGAND BITNUM 7)))                                (\GETBASEBYTE BASE (LRSH BITNUM 3)))              ELSE (LOGAND [LOGXOR 255 (LLSH 1 (IDIFFERENCE 7 (LOGAND BITNUM 7]                              (\GETBASEBYTE BASE (LRSH BITNUM 3])(PUTPROPS GETBIT  MACRO   [OPENLAMBDA (BASE BITNUM)     (LOGAND 1 (LRSH (\GETBASEBYTE BASE (LRSH BITNUM 3))                     (IDIFFERENCE 7 (LOGAND BITNUM 7]))(* ; "For debugging")(DECLARE%: EVAL@COMPILE (PUTPROPS BB.DB  MACRO   (OPENLAMBDA (STREAM BITS NBITS)     (bind (BITSREMAINING _ BITS)            (NBITSREMAINING _ NBITS) do (COND                                               ((IGREATERP NEMPTYBITSINBYTE NBITSREMAINING)                                                (SETQ NEMPTYBITSINBYTE (IDIFFERENCE NEMPTYBITSINBYTE                                                                              NBITSREMAINING))                                                (SETQ BITSINBYTE (LOGOR BITSINBYTE (LLSH                                                                                         BITSREMAINING                                                                                                                                                                              NEMPTYBITSINBYTE                                                                                         )))                                                (RETURN)))                                           (printout STREAM .I8.2.T [LOGOR BITSINBYTE                                                                           (LRSH BITSREMAINING                                                                                 (SETQ NBITSREMAINING                                                                                  (IDIFFERENCE                                                                                        NBITSREMAINING                                                                                                                                                                              NEMPTYBITSINBYTE                                                                                         ]                                                  T)                                           [SETQ BITSREMAINING (LOGAND BITSREMAINING                                                                      (SUB1 (LLSH 1 NBITSREMAINING]                                           (SETQ BITSINBYTE 0)                                           (SETQ NEMPTYBITSINBYTE 8))     BITS))(PUTPROPS BBC.DB  MACRO   ((STREAM . FORMS)                                         (* Open STREAM needed so can cleanup                                                            the last byte)    (LET ((NEMPTYBITSINBYTE 8)          (BITSINBYTE 0))         (DECLARE (SPECVARS NEMPTYBITSINBYTE BITSINBYTE))         (PROGN . FORMS)         (OR (EQ NEMPTYBITSINBYTE 8)             (printout STREAM .I8.2.T BITSINBYTE T))         STREAM))))(* ; "For commented files")(DEFINEQ(COLLAPSECOMMENTS  [LAMBDA (L)                                            (* ; "Edited  6-Oct-92 16:29 by rmk:")                                                             (* ;                                                 "Collapses adjacent semi-coloned comments together")    [IF (LISTP L)        THEN (BIND (TAIL _ L) WHILE TAIL                    DO (IF (NLISTP TAIL)                               THEN (RETURN)                             ELSEIF [AND (EQ COMMENTFLG (CAR (CAR TAIL)))                                             (EQ COMMENTFLG (CAR (CADR TAIL)))                                             (MEMB (CADR (CAR TAIL))                                                   '(; ;; ;;;))                                             (EQ (CADR (CAR TAIL))                                                 (CADR (CADR TAIL)))                                             (STRINGP (CADDR (CAR TAIL)))                                             (STRINGP (CADDR (CADR TAIL]                               THEN [RPLACA (CDDR (CAR TAIL))                                               (CONCAT (CADDR (CAR TAIL))                                                      " "                                                      (CADDR (CADR TAIL]                                     (RPLACD TAIL (CDDR TAIL))                             ELSE (COLLAPSECOMMENTS (CAR TAIL))                                   (POP TAIL]    L])(READCOMMENTEDFILE  [LAMBDA (FILE MSG)                                     (* ; "Edited 27-Sep-92 14:33 by rmk:")    (LET ((FILENAME (INFILEP FILE))          DATE)         (OR FILENAME (ERROR "CAN'T FIND" FILE))         (SETQ DATE (GETFILEINFO FILENAME 'CREATIONDATE))         (IF MSG             THEN (PRINTOUT T MSG " from " FILENAME (CONCAT " [" DATE "]")                             T))         (CL:VALUES (COLLAPSECOMMENTS (RESETLST                                              (READFILE (LET (STRM TSTRM)                                                             [RESETSAVE (SETQ STRM                                                                         (OPENSTREAM FILENAME                                                                                'INPUT))                                                                    '(PROGN (CLOSEF? OLDVALUE]                                                             (SETQ TSTRM (OPENTEXTSTREAM STRM))                                                             (CL:IF (TEDIT.FORMATTEDFILEP TSTRM)                                                                 TSTRM                                                                 (CLOSEF STRM)))                                                     PHONRDTBL)))                DATE FILENAME])(WRITECOMMENTEDFILE  [LAMBDA (EXPR FILE HISTORYFLAG)                        (* ; "Edited  2-Nov-92 09:20 by rmk:")    (* ;; "Writes EXPR (or value of atomic EXPR) on file, not enclosed in parens, with comments indicated by semi-coloned strings for ordinary text editting.  File should be read with READCOMMENTEDFILE.")    (* ;; "If HISTORYFLAG, wites out a (modified) HISTORY property to include the filename, date, and username of this writing.  If history begins with a comment, that comment will be embedded in the new written history entry.  Does not modify the in-memory EXPR, since future writings of subsequent changes shouldn't reflect intermediate edits.  History stuff is inside this function because the filename and creationdate are not known on the outside.  If FILE is an open stream, then EXPR is written to it and it is left open.")    (RESETLST        (LET* (STREAM LEAVEOPEN (LISTEXPR (OR (LISTP EXPR)                                              (AND (LITATOM EXPR)                                                   (LISTP (EVALV EXPR)))                                              EXPR)))              [IF (AND (STREAMP FILE)                           (OPENP FILE 'OUTPUT))                  THEN (SETQ STREAM FILE)                        (SETQ LEAVEOPEN T)                ELSE (RESETSAVE (SETQ STREAM (OPENDATEDSTREAM FILE 'OUTPUT 'NEW))                                '(PROGN (CLOSEF? OLDVALUE)                                        (AND RESETSTATE (DELFILE OLDVALUE]              (IF HISTORYFLAG                  THEN (SETQ LISTEXPR (WRITECOMMENTEDFILE.ADDHISTORY LISTEXPR STREAM)))              (RESETSAVE (SETREADTABLE PHONRDTBL))              (RESETSAVE PRETTYPRINTMACROS (CONS '           (* . WRITECOMMENT)                                                 PRETTYPRINTMACROS))              (RESETSAVE COMMENTFLG NIL)              (PRINTOUT STREAM .PPVTL LISTEXPR T)              (CL:WHEN (AND (LITATOM EXPR)                            (LISTP (EVALV EXPR)))                  (UNMARKASCHANGED EXPR 'VARS))              (IF LEAVEOPEN                  THEN STREAM                ELSE (CLOSEF STREAM))))])(WRITECOMMENTEDFILE.ADDHISTORY  [LAMBDA (EXPR STREAM)                                  (* ; "Edited 27-May-90 12:58 by rmk:")    (IF (LISTP (CAR (LISTP EXPR)))        THEN (LET* [(OLDHIST (ASSOC 'HISTORY EXPR))                        (NEWHIST (IF OLDHIST                                     THEN (APPEND OLDHIST)                                   ELSE (LIST 'HISTORY]                       [IF (AND OLDHIST (EQ (CAR (LISTP (CADR OLDHIST)))                                                COMMENTFLG))                           THEN (RPLACA (CDR NEWHIST)                                           (LIST (FULLNAME STREAM)                                                 (GETFILEINFO STREAM 'CREATIONDATE)                                                 (USERNAME NIL T)                                                 (CADR NEWHIST)))                         ELSE (PUSH (CDR NEWHIST)                                         (LIST (FULLNAME STREAM)                                               (GETFILEINFO STREAM 'CREATIONDATE)                                               (USERNAME NIL T]                       (IF OLDHIST                           THEN (SUBST NEWHIST OLDHIST EXPR)                         ELSE (CONS NEWHIST EXPR)))      ELSE EXPR])(WRITECOMMENT  [LAMBDA (FORM STREAM)                                  (* ; "Edited 10-May-89 10:06 by rmk:")                                                             (* ;                                                        " Prints comments between columns 30 and 80")    (bind W NEXTSPACEPOS (LEFTCOL _ 30)           (RIGHTCOL _ 80)           (COMMSTRING _ (CADDR FORM))           (LASTSPACEPOS _ 0)           (MARK _ (CADR FORM)) first (PRINTOUT STREAM .TAB LEFTCOL MARK " ")       do (SETQ NEXTSPACEPOS (STRPOS " " COMMSTRING (ADD1 LASTSPACEPOS)))             (if (IGREATERP (IPLUS (POSITION STREAM)                                       (IDIFFERENCE (OR NEXTSPACEPOS (ADD1 (NCHARS COMMSTRING)))                                              LASTSPACEPOS))                            RIGHTCOL)                 then (PRINTOUT STREAM .TAB LEFTCOL MARK " "))             [PRINTOUT STREAM (SUBSTRING COMMSTRING (ADD1 LASTSPACEPOS)                                     NEXTSPACEPOS                                     (CONSTANT (CONCAT]             (if NEXTSPACEPOS                 then (SETQ LASTSPACEPOS NEXTSPACEPOS)               else (TERPRI STREAM)                     (RETURN]))(DEFINEQ(STRIPCOMMENTS  [LAMBDA (L)                                            (* ; "Edited 31-Mar-90 17:22 by rmk:")                                                             (* ;                                              "Returns a copy of L with recognized comments removed")    (IF (NLISTP L)        THEN L      ELSEIF (AND (EQ (CAAR L)                          COMMENTFLG)                      (MEMB (CADAR L)                            '(; ;; ;;;))                      (STRINGP (CADDAR L)))        THEN (STRIPCOMMENTS (CDR L))      ELSE (CONS (STRIPCOMMENTS (CAR L))                     (STRIPCOMMENTS (CDR L]))(RPAQ PHONRDTBL (COPYREADTABLE FILERDTBL))(SETSYNTAX (CHARCODE ;)       '[MACRO (LAMBDA (FILE)                 (LIST COMMENTFLG (COND                                     [(EQ (PEEKCCODE FILE)                                          (CHARCODE ;))                                      (READCCODE FILE)                                      (COND                                         ((EQ (PEEKCCODE FILE)                                              (CHARCODE ;))                                          (READCCODE FILE)                                          ';;;)                                         (T ';;]                                     (T ';))                       (DREADLINE FILE]       PHONRDTBL)(PUTPROPS BINARYFILES COPYRIGHT ("Xerox Corporation" 1989 1990 1991 1992 1993 1994 1995 1997 1999 2018))(DECLARE%: DONTCOPY  (FILEMAP (NIL (13332 23812 (BINARYFILETYPE 13342 . 14126) (BYTEBLOCK 14128 . 14589) (COPYBINARYFILEHEADER 14591 . 14898) (FILETOBYTEBLOCK 14900 . 16702) (WORDBLOCK 16704 . 17162) (SIZECOPYRIGHTANDDATESTRINGS 17164 . 19300) (NCOPYRIGHTSTRINGCHARS 19302 . 20396) (WRITECOPYRIGHTANDDATESTRINGS 20398 . 22532) (PUTCOPYRIGHTSTRING 22534 . 23810)) (23813 24912 (COERCEUTOITIME 23823 . 24351) (ITOUTIME 24353 . 24633) (UTOITIME 24635 . 24910)) (24913 26296 (BINARYFILETYPETOCODE 24923 . 25221) (CODETOBINARYFILETYPE 25223 . 26294)) (27624 29089 (GETCOPYRIGHTSTRING 27634 . 29087)) (29090 37741 (EVENBYTE 29100 . 29454) (EVENNUMBER 29456 . 29746) (QUADBYTE 29748 . 30211) (QUADNUMBER 30213 . 30525) (OPENBINARYFILESTREAM 30527 . 33006) (OPENDATEDSTREAM 33008 . 33747) (MAKE-STANDARDHEADER 33749 . 34595) (READBINARYFILEHEADER 34597 . 37739)) (40292 40762 (BITBLOCK 40302 . 40760)) (44069 51764 (COLLAPSECOMMENTS 44079 . 45590) (READCOMMENTEDFILE 45592 . 46940) (WRITECOMMENTEDFILE 46942 . 49164) (WRITECOMMENTEDFILE.ADDHISTORY 49166 . 50501) (WRITECOMMENT 50503 . 51762)) (51765 52456 (STRIPCOMMENTS 51775 . 52454)))))STOP